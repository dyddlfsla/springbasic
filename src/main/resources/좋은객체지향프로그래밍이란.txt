
 ◆ 객체 지향 프로그래밍

 1.객체 지향 프로그래밍은 컴퓨터 프로그램을 명령어의 목록으로 보는 시각에서 벗어나 여러 개의 독립된 단위, 즉 '객체'들의 모임으로 파악하고자 하는 것이다.
  각각의 객체는 메세지를 주고 받고, 데이터를 처리할 수 있다.

 2.객체 지향 프로그래밍은 프로그램을 유연하고 변경이 쉽게 만들기 때문에 대규모 소프트웨어 개발에 많이 사용된다.
 3. 역할과 구현을 분리
 - 역할과 구현으로 구분하면 세상이 단순해지고, 유연해지며 변경도 편리해진다.
 - 클라이언트는 대상의 역할(인터페이스)만 알면 된다.
 - 클라이언트는 구현 대상의 내부 구조를 몰라도 된다.
 - 클라이언트는 구현 대상의 내부 구조가 변경되어도 영향 받지 않는다.
 - 클라이언트는 구현 대상 자체를 변경해도 영향 받지 않는다.

 ＃Java 에서의 역할과 구현
 - 다형성을 활용
   - 역할 = 인터페이스
   - 구현 = 인터페이스를 구현한 클래스, 구현 객체
 - 객체를 설계할 때 역할과 구현을 명확히 분리
 - 객체 설계 시 역할(인터페이스)을 먼저 부여하고, 그 역할을 수행하는 구현 클래스를 설계한다.


 ◆ 스프링과 객체 지향 프로그래밍

 1. 다형성이 핵심 개념

 2. 스프링은 다형성을 극대화하여 사용할 수 있도록 도와준다.

 3. 스프링에서 말하는 제어의 역전(IoC), 의존관계 주입(DI) 은 다형성을 활용해서 역할과 구현을 편리하게 다룰 수 있도록 지원한다.

 4. 스프링을 사용하면 마치 레고 블럭을 조립하듯이, 공연 무대의 배우를 선택하듯이, 구현을 편리하게 변경할 수 있다.