
 ◆ IoC, DI, 그리고 컨테이너

 1. 제어의 역전(Inversion of Control)
 기존의 프로그램은 클라이언트 구현 객체가 스스로 필요한 서버 구현 객체를 생성하고, 의존관계를 설정하고 실행했다.
 한마디로 구현 객체가 프로그램의 제어 흐름을 스스로 조종했다. 개발자 입장에서는 자연스러운 흐름이다.
 반면에 AppConfig 를 만든 이후부터는 구현 객체는 자신의 로직을 실행하는 것에만 집중하게 된다. 프로그램의 제어 흐름은 이제 AppConfig 가 가져가게 된다.
 예를 들어, OrderServiceImpl 은 필요한 인터페이스들을 호출하지만 정작 그것에 대해 어떤 구현 클래스들이 실행될지는 알 수 없다.
 프로그램의 제어 흐름 권한은 모두 AppConfig 가 가지고 있다. 심지어 OrderServiceImpl 도 AppConfig 가 생성한다. 그리고 AppConfig 는
 OrderServiceImpl 이 아닌 OrderService 인터페이스의 다른 구현 클래스를 생성하고 실행할 수도 있다. 그런 사실도 모른 채 OrderServiceImpl 은
 그저 자신이 맡은 역할만 수행하는 것이다. 이렇게 프로그램의 제어 흐름을 직접 제어하는 것이 아니라 외부에서 관리하는 것을 제어의 역전(Ioc) 이라 한다.

 2. 의존관계 주입(Dependency Injection)
 OrderServiceImpl 은 DiscountPolicy 인터페이스에 의존하며, 실제 어떤 구현 객체가 사용될지는 알지 못한다. 의존관계는 크게
 '정적인 클래스 의존 관계'와 '실행 시점에 결정되는 동적인 객체(인스턴스) 의존 관계'로 분리해서 생각할 수 있다.

 1) 정적인 클래스 의존관계
 클래스가 사용하는 import 문만 보고 의존관계를 쉽게 판단할 수 있다. 정적인 의존관계는 애플리케이션을 직접 실행하지 않아도 분석할 수 있는 것이다.
 코드 상으로만 본다면 OrderServiceImpl 은 MemberRepository, DiscountPolicy 에 의존한다는 것을 알 수 있다.
 그러나 이러한 클래스 의존관계만으로는 실제 어떤 객체가 OrderServiceImpl 에 주입될지 알 수 없다.

 2) 동적인 객체 인스턴스 의존관계
 애플리케이션 실행 시점에 실제 생성된 객체 인스턴스의 참조가 연결된 의존 관계다.
 실행 시점(런타임)에 외부에서 실제 구현 객체를 생성하고 클라이언트에 전달해서 클라이언트와 서버의 실제 의존 관계가 성립하는 것이다.
 객체 인스턴스를 생성하고, 그 참조값을 전달하여 연결된다.
 의존관계 주입을 사용하면 클라이언트 코드를 변경하지 않고, 클라이언트가 호출하는 대상의 타입 인스턴스를 변경할 수 있다.
 의존관계 주입을 사용하면 정적인 클래스 의존관계를 변경하지 않고, 동적인 객체 인스턴스 의존관계를 쉽게 변경할 수 있게 된다.

 3.IoC, DI 컨테이너
 AppConfig 처럼 객체를 생성하고 관리하면서 의존관계를 연결시켜주는 존재를 IoC 컨테이너 또는 DI 컨테이너라고 한다.
 의존관계 주입에 초점을 맞추어 최근에는 DI 컨테이너라고 부르는 경우가 더 많다.
 또는 어셈블러(assembler), 오브젝트 팩토리(Object factory) 로 불리는 경우도 있다.



