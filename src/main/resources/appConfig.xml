<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

  <bean id="memberService" class="com.example.springbasic.member.MemberServiceImpl">
    <constructor-arg name="memberRepository" ref="memberRepository"/>
  </bean>

  <bean id="memberRepository" class="com.example.springbasic.member.MemoryMemberRepository"/>
  <bean id="orderService" class="com.example.springbasic.order.OrderServiceImpl">
    <constructor-arg name="memberRepository" ref="memberRepository"/>
    <constructor-arg name="discountPolicy" ref="discountPolicy"/>
  </bean>

  <bean id="discountPolicy" class="com.example.springbasic.discount.RateDiscountPolicy"/>
</beans>

<!--
 ◆ 다양한 형식 지원 - Java 코드, XML 형식 지원

 스프링 컨테이너는 다양한 형식의 설정 정보를 받을 수 있게끔 유연하게 설계되어 있다.
 예) Java 클래스, XML, Groovy 등

 AnnotationConfigApplicationContext → AppConfig.class
 GenericXmlApplicationContext → appConfig.xml
 XxxApplicationContext → appConfig.xxx

 1. 어노테이션 기반 자바 클래스 사용
 new AnnotationConfigApplicationContext(AppConfig.class);
 자바 클래스를 생성자의 매개변수로 전달해준다.

 2. xml 설정 사용
 최근 들어, 스프링 프레임워크를 사용할 때 스프링부트를 많이 사용하게 되면서 XML 기반의 설정은 잘 사용하지 않는다.
 그러나 아직 많은 레거시 프로젝트들이 xml 설정을 사용하고 있고, 또 xml 을 사용하게 되면 컴파일 없이 빈 설정 정보를 변경할 수 있다는 장점도 있으므로 알아두면 좋다.
 new GenericXmlApplicationContext("appConfig.xml");

 더 궁금한 것이 있다면 스프링 공식 문서를 참고하면 될 것이다.

-->