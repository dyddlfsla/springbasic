
◆ 객체 지향 설계의 5가지 원칙

1. SRP: 단일 책임 원칙(single responsibility principle)
   - 하나의 클래스는 하나의 책임만 가져야 한다.
   - 하나의 책임이라는 것은 모호한 표현이다.
     - 문맥과 상황에 따라 얼마든지 달라질 수 있다.
   - 중요한 기준은 변경이다. 구조가 변경될 때 그로 인한 파급 효과가 적다면 단일 책임 원칙을 잘 따른 것.

2. OCP: 개방-폐쇄 원칙(open/closed principle)
   - 소프트웨어 요소는 확장에는 열려 있으나, 변경에는 닫혀 있어야 한다.
     - 확장 한다는 것은 곧 코드를 변경한다는 뜻이 될텐데, 어떻게 이런 것이 가능할까?
   - 다형성을 활용
   - 인터페이스를 구현한 새로운 클래스를 하나 만들고 그 안에 새로운 기능을 구현

3. LSP: 리스코프 치환 원칙(Liskov substitution principle)
   - 프로그램의 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하위 타입의 인스턴스로 바꿀 수 있어야 한다.
   - 다형성에서 하위 클래스는 인터페이스 규약을 다 지켜야 한다는 것

4. ISP: 인터페이스 분리 원칙(interface segregation principle)
   - 특정 클라이언트를 위한 다수의 인터페이스가 한 가지의 범용 인터페이스보다 낫다.
   - 인터페이스가 명확해지고, 대체 가능성이 높아진다.

5. DIP: 의존관계 역전 원칙(Dependency inversion principle)
  - 프로그래머는 추상화에 의존해야 하며 구체화에 의존해서는 안된다.