
 ◆ 스프링 Bean 설정 meta 정보

 스프링은 어떻게 이런 다양한 설정 형식을 지원하는 것일까? 그 중심에는 BeanDefinition 이라는 추상화가 존재한다.
 쉽게 말해, 역할과 구현을 개념적으로 분리한 것이다.

  • xml 을 읽어서 BeanDefinition 을 만든다.
  • .class 를 읽어서 BeanDefinition 을 만든다.

 BeanDefinition 을 빈 설정 메타정보라 한다.
  • @Bean, <bean> 로부터 각각의 메타정보를 생성한다.
  • 스프링 컨테이너는 이 메타정보를 기반으로 스프링 Bean 을 생성한다.

 AnnotationConfigApplicationContext 는 내부적으로 가지고 있는 AnnotatedBeanDefinitionReader 를 사용하여 AppConfig.class 를 읽고 BeanDefinition 을 생성한다.
 GenericXmlApplicationContext 는 XmlBeanDefinitionReader 를 사용해 appConfig.xml 설정 정보를 읽고 BeanDefinition 을 만든다.

 1. BeanDefinition 살펴보기
  • BeanClassName: 생성할 bean 의 클래스명
  • factoryBeanName: 팩토리 역할의 bean 을 사용할 경우 이름 예) appConfig
  • factoryMethodName: 빈을 생성할 팩토리 메서드 지정 예) memberService
  • Scope: 싱글톤(기본값)
  • lazyInit: 스프링 컨테이너를 생성할 때 바로 bean 을 생성하는 것이 아니라 실제 bean 이 사용되기 전까지 최대한 생성을 지연하는지 여부
  • initMethodName: bean 을 생성하고, 의존관계를 적용한 뒤 호출되는 초기화 메서드명
  • DestroyMethodName: bean 의 생명주기가 끝나서 bean 을 제거하기 직전에 호출되는 메서드명
  • Constructor arguments, Properties: 의존관계 주입에서 사용한다.

 BeanDefinition 을 직접 생성해서 스프링 컨테이너에 등록할 수도 있지만, 실무에서 BeanDefinition 을 직접 정의하거나 사용할 일은 거의 없다.
 스프링의 모든 것을 다 이해하려하기 보다는 스프링이 다양한 형태의 설정 정보를 읽어들일 때 각각의 정보들을 BeanDefinition 으로 추상화한다는 것 하나만 기억해도 좋다.



