
 ◆ 웹 어플리케이션과 singleton

 Spring framework 는 태생적으로 기업용 온라인 서비스 기술을 지원하기 위해 만들어졌다.
 대부분의 스프링 애플리케이션은 웹 애플리케이션이다. 물론 웹이 아닌 일반 애플리케이션 개발도 얼마든지 개발할 수 있다.
 그러나 일반적인 경우 스프링 애플리케이션은 웹 어플리케이션이고 웹 어플리케이션은 보통 여러 고객이 동시에 보낸 요청을 받게 된다.

 만약 스프링이 없는 순수한 DI 컨테이너라면 AppConfig 는 요청을 받을 때마다 Service, Repository 객체를 새로 생성할 것이다.
 고객이 보낸 요청이 초당 100건이라면 당연히 초당 100개의 객체가 생성되고 소멸된다 → 같은 객체를 100번이나 만들고 없애는 것은 불필요한 일이며 메모리 낭비를 유발할 것이다.
 이를 해결하기 위한 방안은, 필요한 객체를 1개만 만든 뒤 해당 객체를 공유하여 계속 사용하는 것이다. → singleton 패턴


 1. singleton pattern (싱글톤 패턴)
 싱글톤 패턴이란, 클래스의 인스턴스가 딱 1개만 생성되는 것을 보장하는 패턴이다.
 그러므로 싱글톤 패턴을 만들기 위해서는 객체 인스턴스를 2개 이상 생성하지 못하도록 막아야 할 것이다.
  • private 를 생성자에 적용하여 외부에서 함부로 new 키워드를 사용하지 못하도록 막는다.

 ※ 싱글톤 패턴은 하나의 패턴으로써, 그 구현 방법에는 한 가지만 있는 것이 아니라 다양한 방식이 존재한다.
   - 여기서는 객체를 미리 생성해 저장해두고 생성자를 막는 방법을 사용하였다.

 싱글톤 패턴을 적용하면 클라이언트의 요청이 올 때마다 객체를 생성하는 것이 아니라, 이미 만들어진 객체를 공유하여 효율적으로 사용할 수 있다.
 하지만 싱글톤 패턴은 다음과 같은 단점 역시 가지고 있다.

 1) 문제점
  • 싱글톤 패턴을 구현하는 데 많은 코드가 들어간다.(비용 소모)
  • 의존관계상 클라이언트가 구현 클래스에 의존하게 된다. (객체지향원칙 DIP, OCP 위반)
  • 테스트하는데 있어 어려움이 존재한다.
  • 내부 필드값을 변경하거나 초기화 하기 어렵다.
  • private 생성자로 인해 자식 클래스를 만들기 어렵다.
  • 프로그램의 유연성을 저하시킨다.
  • 사용하지 말아야 할 Anti-pattern 으로 여겨지기도 한다.


 ◆ singleton 컨테이너

 스프링 컨테이너는 싱글톤 패턴의 문제점을 해결하면서, 동시에 객체 인스턴스를 싱글톤(1개만 생성)으로 관리한다.
 지금까지 학습한 스프링 bean 은 싱글톤으로 관리되고 있었던 것이다.





